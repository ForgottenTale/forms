import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Input from '../ui-component/input'
import { Formik } from 'formik';
import * as yup from 'yup';
import axios from 'axios';
import Loader from '../ui-component/loader';
import { useState } from 'react';
import Error from '../ui-component/error';
import styles2 from '../styles/Wlc.module.css'
import Select from 'react-select';
import CustomRadio from '../ui-component/CustomRadio';

export default function Home() {

  const customStyles = {
    control: () => ({
      padding: "0",
      display: "flex",
      color: "white",
      height: "35px",
      backgroundColor: "transparent",
      marginBottom: "30px",
      borderBottom: "1px white solid"
    })
  }
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [errorMsg, setErrorMsg] = useState(false);

  const user = {
    email: "",
    name: "",
    phone: "",
    gender: "",
    membershipType: "",
    membershipId: "",
    institute: "",
    role: "",
    location: "",
    food: ""
  }

  let schema = yup.object().shape({
    email: yup.string().email().required(),
    name: yup.string().required(),
    phone: yup.number().required(),
    gender: yup.string().required(),
    membershipType: yup.string().required(),
    membershipId: yup.number(),
    institute: yup.string().required(),
    role: yup.string().required(),
    location: yup.string().required(),
    food: yup.string().required()
  });
  async function displayRazorpay(data, values) {
    const res = await loadScript('https://checkout.razorpay.com/v1/checkout.js')

    if (!res) {
      alert('Razorpay SDK failed to load. Are you online?')
      return
    }

    const options = {
      key: data.key,
      currency: data.currency,
      amount: String(data.amount),
      order_id: data.id,
      name: 'IEEE Job Fair 2022',
      description: 'Thank you for registering',

      handler: async (response) => {
        try {
          await axios.post("/api/pay/razorpay/verify", response)
          navigate(`/confirmation/jobfair/${response.razorpay_order_id}`)
        } catch (err) {
          setError(true)
          setErrorMsg(err.response !== undefined ? err.response.data.error : err)
          setLoading(false);
        }

      },
      prefill: {
        name: `${values.firstName} ${values.lastName}`,
        email: values.email,
        contact: `+91${values.phone}`
      }
    }
    const paymentObject = new window.Razorpay(options)
    paymentObject.open()
    paymentObject.on('payment.failed', async (response) => {
      console.log(response)
      try {
        await axios.post("/api/pay/razorpay/failed", response.error)
        navigate(`/confirmation/jobfair/${response.error.metadata.order_id}`)
        paymentObject.close()
      } catch (err) {
        setError(true)
        setErrorMsg(err.response !== undefined ? err.response.data.error : err)
        setLoading(false);
      }
    });
  }
  function buildForm(values) {

    var formData = new FormData()
    var key = Object.keys(values)

    key.forEach((val) => {
      formData.append(val, values[val])
    })
    return formData;
  }

  const handleUpload = async (values) => {
    setLoading(true);
    try {
      const formData = buildForm(values)
      const res = await axios.post(`/api/pay/razorpay?formId=wlc`, formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          }

        }
      )
      displayRazorpay(res.data, values)
    }
    catch (err) {
      setError(true)
      setErrorMsg(err.response !== undefined ? String(err) : String(err))
      setLoading(false);
    }

  }

  const options = [{value:"Male",label:"Male"},{value:"Female",label:"Female"}];
  
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles2.main}>
        <div className={styles2.eventform}>
          {error ? <Error setError={setError} msg={errorMsg} /> : null}
          {loading ?

            <>
              <Loader />
              <p className={styles2.loaderMsg}>Don&apos;t refresh this page. Redirecting to payment processing service ...</p>
            </>
            :


            <div className={styles2.eventform_con}>
              <div className={styles2.eventdetails}>
                <p className={styles2.eventdetails_dnt}>REGISTRATION FORM</p>
                <h3 className={styles2.eventdetails_title}>WIE ILS 2022 - IEEE Kerala Section</h3>

              </div>
              <Formik
                initialValues={user}
                validationSchema={schema}
                onSubmit={(values) => { handleUpload(values) }}
              >
                {({ values, setFieldValue, handleSubmit, errors }) => (
                  <>
                    <Input
                      id="whitePlaceholder"
                      placeholder={"Your NAME"}
                      value={values}
                      name="name"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>

                    <Input
                      id="whitePlaceholder"
                      placeholder={"Email"}
                      value={values}
                      name="email"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>

                    <Input

                      id="whitePlaceholder"
                      placeholder={"Phone"}
                      value={values}
                      name="phone"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>
                    <Select
                      placeholder={"Gender"}
                      styles={customStyles}
                      options={options}
                      onChange={(e) => setFieldValue("gender", e.value)}

                    />
                
                    <CustomRadio
                      label={"Are you an IEEE Member ?"}
                      name="membershipType"
                      values={values}
                      setFieldValue={setFieldValue}
                      errors={errors}
                      options={["IEEE member", "Non - IEEE Academic", "Non - IEEE Industrial"]} />

                    <Input

                      id="whitePlaceholder"
                      placeholder={"ieee membership id"}
                      value={values}
                      name="membershipId"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>
                    <Input

                      id="whitePlaceholder"
                      placeholder={"College / Institution"}
                      value={values}
                      name="institute"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>

                    <Input

                      id="whitePlaceholder"
                      placeholder={"Current Role/Position"}
                      value={values}
                      name="role"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>
                    <Input

                      id="whitePlaceholder"
                      placeholder={"Current Location"}
                      value={values}
                      name="location"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input>
                    {/* <Input

                      id="whitePlaceholder"
                      placeholder={"Food Preference"}
                      value={values}
                      name="food"
                      setFieldValue={setFieldValue}
                      errors={errors}></Input> */}
                    <CustomRadio
                      label={"Food Preference *"}
                      name="food"
                      values={values}
                      setFieldValue={setFieldValue}
                      errors={errors}
                      options={["Veg", "Non-Veg"]} />
                    <button className={styles2.button} onClick={handleSubmit}>
                      SUBMIT
                    </button>
                    {JSON.stringify(values, 2, null)}

                  </>
                )}

              </Formik>


            </div>

          }

        </div>
      </main>

    </div>
  )
}
