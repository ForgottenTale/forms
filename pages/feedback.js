import Head from "next/head";
import styles from "../styles/Feedback.module.css";
import { Formik } from "formik";
import * as yup from "yup";
import axios from "axios";
import Loader from "../ui-component/loader";
import { useState } from "react";
import Error from "../ui-component/error";
import { useRouter } from "next/router";
import EmojiSelector from "../ui-component/emojiSelector";
import TextArea2 from "../ui-component/textArea2";
import { getIn } from "formik";

export default function Home() {
  const router = useRouter();

  function buildForm(values) {
    var formData = new FormData();
    var key = Object.keys(values);

    key.forEach((val) => {
      formData.append(val, values[val]);
    });
    return formData;
  }

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);
  const [errorMsg, setErrorMsg] = useState(false);

  const user = {
    short: "",
    des: "",
  };

  let schema = yup.object().shape({
    short: yup.string().required(),
    des: yup.string(),
  });

  const handleUpload = async (values) => {
    setLoading(true);
    try {
      const formData = buildForm(values);
      
      const res = await axios.post(
        "/api/response?formId=feedback",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );
    
    router.push(`/feedback/feedback/${res.data.id}`);
     
    } catch (err) {
      setError(true);
      setErrorMsg(err.response !== undefined ? err.response.data.error : err);
      setLoading(false);
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Feedback</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.eventdetails_con}>
          {/* <img src={"./banner.jpeg"} className={styles.image} alt="BANNER" /> */}
          <div className={styles.eventdetails_con_circle}></div>
          <div className={styles.eventdetails_con_circle}></div>
          <div className={styles.eventdetails_con_circle}></div>

          <div className={styles.eventdetails}>
            {/* <p className={styles.eventdetails_dnt} >REGISTRATION FORM</p> */}
            <h3 className={styles.eventdetails_title}>Feedback</h3>
          </div>
        </div>
        <div className={styles.eventform}>
          {error ? <Error setError={setError} msg={errorMsg} /> : null}
          {loading ? (
            <>
              <Loader msg="Don't refresh this page. Redirecting to payment processing service ..." />
            </>
          ) : (
            <div className={styles.eventform_con}>
              <Formik
                initialValues={user}
                validationSchema={schema}
                onSubmit={(values) => {
                  handleUpload(values);
                }}
              >
                {({ values, setFieldValue, handleSubmit, errors }) => (
                  <>
                    <EmojiSelector
                      onClick={(e) => setFieldValue("short", e)}
                      value={values.short}
                      errors={
                        getIn(errors, "short") !== undefined
                          ? getIn(errors, "short")
                          : ""
                      }
                    />
                    <TextArea2
                      label="Share your thoughts about the event"
                      value={values.des}
                      onChange={(e) => setFieldValue("des", e.target.value)}
                      placeholder="Write your feedback here"
                      errors={
                        getIn(errors, "des") !== undefined
                          ? getIn(errors, "des")
                          : ""
                      }
                    />
                    <button className={styles.button} onClick={handleSubmit}>
                      SUBMIT
                    </button>
                  </>
                )}
              </Formik>

              <footer className={styles.footer}>
                <p>
                  This content is created by the owner of the form. The data you
                  submit will be sent to the form owner. IEEE Kerala Section is
                  not responsible for the privacy or security practices of its
                  customers, including those of this form owner. Never give out
                  your password.
                </p>
                <br />
                Powered by IKS Mint Forms |{" "}
                <a
                  style={{ color: "blue" }}
                  href="https://ieee-mint.org/privacy"
                >
                  Privacy and cookies
                </a>{" "}
                |{" "}
                <a style={{ color: "blue" }} href="https://ieee-mint.org/terms">
                  Terms of use
                </a>
              </footer>
            </div>
          )}
        </div>
      </main>
    </div>
  );
}
