import FormBackLayout from "../../layouts/FormBackLayout/formBackLayout"
import styles from '../../styles/Pricing.module.css';
import CreateDiscountCodes from "../../components/createDiscountCodes";
import Notification from "../../ui-component/notification";
import Error from "../../ui-component/error";
import moment from "moment";
import axios from 'axios'
import { useState } from "react";
import { useQuery, useQueryClient } from 'react-query'
import { useRouter } from 'next/router';
import Head from "next/head";
import ViewIcon from "../../icons/view";
import EditIcon from "../../icons/edit";
import Loader from "../../ui-component/loader";
import ViewDiscountCodes from "../../components/viewDiscountCodes";

export default function Pricing() {

    const [show, setShow] = useState(false);
    const [showDisDetails, setShowDisDetails] = useState(false);
    const [error, setError] = useState(false);
    const [errorMsg, setErrorMsg] = useState(false);
    const [notificationMsg, setNotificationMsg] = useState(false);
    const [notification, setNotification] = useState(false);
    const [disabled, setDisabled] = useState(false);
    const [discount, setDiscount] = useState({})
    const queryClient = useQueryClient();
    const router = useRouter();
    const formId = router.query.formId


    const getData = async () => {

        try {
            const res = await axios.get(`/api/form/discounts?formId=${formId}`)
            return res;
        }
        catch (err) {
            setError(true)
            setErrorMsg(err.response !== undefined ? err.response.data.error : err)
        }
    }
    const { isLoading, error: isError, data } = useQuery('pricing', getData, { enabled: formId !== undefined ? true : false })


    const handleSubmit = async (data) => {
        var arr = data;
        arr.specific = arr.specific.split(',');
        setDisabled(true);
        try {
            await axios.post(`/api/form/discounts/create?formId=wlc`, arr)
            setNotification(true);
            setNotificationMsg("Added the discount code");
            setDisabled(false);
            setShow(false);
        }
        catch (err) {
            setError(true);
            setDisabled(false);
            setErrorMsg(err.response !== undefined ? err.response.data.error : err)
        }

    }



    return (
        <FormBackLayout>
            <Head>
                <title>Pricing</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {showDisDetails ? <ViewDiscountCodes data={discount} setModal={setShowDisDetails} /> : null}
            {notification ? <Notification msg={notificationMsg} setNotify={setNotification} /> : null}
            {error ? <Error setError={setError} msg={errorMsg} /> : null}
            {show ? <CreateDiscountCodes handleSubmit={handleSubmit} disabled={disabled} setModal={setShow} /> : null}
            {isLoading ?
                <div className={styles.loader}>
                    <Loader />
                    <p>Retrieving data</p>
                </div>
                :
                <div className={styles.pricing}>
                    <div className={styles.header}>
                        <h4>Pricing</h4>
                        {/* <button className={styles.responses_button} onClick={() => setShow(true)}>Create discount codes</button> */}
                    </div>

                    {data !== undefined ? <div className={styles.tabel}>
                        <div className={styles.row}>
                            <p>Type</p>
                            <p>Expiry date</p>
                            <p>Action</p>
                        </div>
                        {Object.keys(data.data.pricing).map((val, key) =>
                            val === "default" || val === "earlyBird" ? <div key={key} className={styles.row}>
                                <p>{val}</p>
                                <p>{data.data.pricing[val].expiryDate !== null ? moment(data.data.pricing[val].expiryDate).format("LLLL") : "None"} {val.expiryDate}</p>
                                <div className={styles.buttons}>
                                    <ViewIcon onClick={()=>{setDiscount(data.data.pricing[val]);setShowDisDetails(true)}} />
                                    <EditIcon />
                                </div>
                            </div> : "")}

                    </div> : null}
                    <div className={styles.header}>
                        <h4>Discount codes</h4>
                        <button className={styles.responses_button} onClick={() => setShow(true)}>Create discount codes</button>
                    </div>

                    <div className={styles.tabel}>
                        {data !== undefined ? <div className={styles.tabel}>
                            <div className={styles.row}>
                                <p>Type</p>
                                <p>Expiry date</p>
                                <p>Action</p>
                            </div>
                            {Object.keys(data.data.pricing).map((val, key) =>
                                val !== "default" && val !== "earlyBird" ? <div key={key} className={styles.row}>
                                    <p>{val}</p>
                                    <p>{data.data.pricing[val].expiryDate !== null ? moment(data.data.pricing[val].expiryDate).format("LLLL") : "None"} {val.expiryDate}</p>
                                    <div className={styles.buttons}>
                                        <ViewIcon onClick={()=>{setDiscount(data.data.pricing[val]);setShowDisDetails(true)}}  />
                                        <EditIcon />
                                    </div>


                                </div> : "")}

                        </div> : null}
                    </div>
                </div>}
        </FormBackLayout>
    )
}